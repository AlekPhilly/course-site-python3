Введение в Python 3
###################

:date: 2017-09-01 09:00

.. default-role:: code
.. contents:: Содержание

Введение
========

Данный курс будет посвящен изучению программирования с использованием языка **Python**. Python — это современный язык
программирования, работающий на всех распространённых операционных системах.

В настоящее время существует две версии языка Python: более старая, но пока ещё более распространённая версия 2 и
современная версия 3. Мы будем использовать версию 3 данного языка. Именно её необходимо установить дома, скачав данную
версию с сайта `www.python.org`_.

.. _www.python.org: http://www.python.org

Запустить интерпретатор python можно из командной строки:

.. code-block:: bash

   python3

Будьте внимательны — команда `python` запустит интерпретатор версии 2, с которым мы работать не будем. В системе
Windows можно использовать пункт меню «Python (command line)».

Интерактивный режим
==============================

Откройте командную строку и напишите команду python3.

Вы увидите примерно следующее приглашение командной строки:

.. code-block:: pycon

   Python 3.1.2 (r312:79147, Jun 12 2010, 15:29:06)
   [GCC 4.4.3 20100316 (ALT Linux 4.4.3-alt2)] on linux2
   Type "help", "copyright", "credits" or "license" for more information.
   >>>

Вводите команды и наслаждайтесь результатом. А что можно вводить? Несколько примеров:

.. code-block:: pycon

   >>> 2 + 2
   4
   >>> 2 ** 100
   1267650600228229401496703205376
   >>> 'Hello' + 'World'
   'HelloWorld'
   >>> 'ABC' * 10
   'ABCABCABCABCABCABCABCABCABCABC'

Первая команда вычисляет сумму двух чисел, вторая команда вычисляет 2 в степени 100, третья команда выполняет операцию
**конкатенации** для строк, а четвертая команда печатает строку `'ABC'`, повторенную 10 раз.

Хотите закончить работу с питоном? Введите команду `exit()` (именно так, со скобочками, так как это — **функция**)
или нажмите ``Ctrl+D``.

Типы данных
-----------

Итак, мы видим, что Python умеет работать как минимум с двумя видами данных — числами и строками. Числа записываются
последовательностью цифр, также перед числом может стоять знак минус, а строки записываются в одинарных кавычках. `2`
и `'2'` — это разные объекты, первый объект — число, а второй — строка. Операция ``+`` для целых чисел и для строк
работает по-разному: для чисел это сложение, а для строк — конкатенация.

Кроме целых чисел есть и другой класс чисел: действительные (вещественные числа), представляемые в виде десятичных
дробей. Они записываются с использованием десятичной точки, например, `2.0`.

Определить тип объекта можно при помощи функции `type`:

.. code-block:: pycon

   >>> type(2)
   <class 'int'>
   >>> type('2')
   <class 'str'>
   >>> type(2.0)
   <class 'float'>

Обратите внимание — `type` является функцией, аргументы функции указываются в скобках после ее имени.

Операции с числами
------------------

Вот список основных операций для чисел:

- `A+B` — сумма;
- `A-B` — разность;
- `A*B` — произведение;
- `A/B` — частное;
- `A**B` — возведение в степень.

Полезно помнить, что квадратный корень из числа ``x`` — это `x**0.5`, а корень степени ``n`` — это `x**(1/n)`.

Есть также унарный вариант операции ``-``, то есть операция с одним аргументом. Она возвращает число, противоположное
данному. Например: `-A`.

В выражении может встречаться много операций подряд. Как в этом случае определяется порядок действий? Например, чему
будет равно `1+2*3**1+1`? В данном случае ответ будет 8, так как сначала выполняется возведение в степень, затем —
умножение, затем —  сложение.

Более общие правила определения приоритетов операций такие:

#. Выполняются возведения в степень  **справа налево**, то есть `3**3**3` это 3²⁷.
#. Выполняются унарные минусы (отрицания).
#. Выполняются умножения и деления слева направо. Операции умножения и деления имеют одинаковый приоритет.
#. Выполняются сложения и вычитания слева направо. Операции сложения и вычитания имеют одинаковый приоритет.

Операции над строками
---------------------

- `A+B` — конкатенация;
- `A*n` — повторение ``n`` раз, значение ``n`` должно быть целого типа.


Программируемый режим
======================

В предыдущей главе мы использовали Python для простых разовых вычислений, используя интерактивный режим.
Теперь создадим программу и выполним её целиком.

.. code-block:: python

   a = 179
   b = 197
   c = (a ** 2 + b ** 2) ** 0.5
   print (c)

Здесь мы используем  **переменные** — объекты, в которых можно сохранять различные (числовые, строковые и прочие)
значения. В первой строке переменной `a` присваивается значение `179`, затем переменной `b` присваивается значение
`971`, затем переменной `c` присваивается значение арифметического выражения, равного длине гипотенузы. После этого
значение переменной `c` выводится на экран.

Сохраните этот текст из любого текстового редактора в файле с именем `hypot.py`. Запустите терминал, перейдите в каталог, где лежит этот файл и
выполните эту программу:

.. code-block:: bash

   python3 hypot.py

Интерпретатор языка Python, запущенный с указанием имени файла, запускается не в интерактивном режиме, а выполняет ту
последовательность команд, которая сохранена в файле.


При этом значения вычисленных выражений не выводятся на экран (в
отличии от интерактивного режима), поэтому для того, чтобы вывести результат работы программы, то есть значение
переменной `c`, нам понадобится специальная функция `print`.

Ввод данных: функция `input()`
==============================

Пример выше неудобен тем, что исходные данные для программы заданы в тексте программы, и для того, чтобы использовать
программу для другого треугольника необходимо исправлять текст программы. Это неудобно, лучше, чтобы текст программы не
менялся, а программа запрашивала бы у пользователя данные, необходимые для решения задачи, то есть запрашивала бы
значения двух исходных переменных `a` и `b`. Для этого будем использовать функцию `input()`, которая считывает строку с
клавиатуры и возвращает значение считанной строки, которое сразу же присвоим переменным `a` и `b`:

.. code-block:: python

   a = input()
   b = input()

Правда, функция `input` возвращает текстовую строку, а нам нужно сделать так, чтобы переменные имели целочисленные
значения. Поэтому сразу же после считывания выполним преобразование типов при помощи функции `int` и запишем новые
значения в переменные `a` и `b`.

.. code-block:: python

   a = int(a)
   b = int(b)


Можно объединить считывание строк и преобразование типов, если вызывать функцию `int` для того значения, которое вернёт
функция `input`:

.. code-block:: python

   a = int(input())
   b = int(input())

Далее в программе вычислим значение переменной `c` и выведем результат на экран.

Теперь мы можем, не меняя исходного кода программы, многократно использовать её для решения различных задач. Для того
нужно запустить программу и после запуска программы ввести с клавиатуры два числа, нажимая после каждого числа клавишу
`Enter`. Затем программа сама выведет результат.

Вывод данных: функция `print()`
===============================

Функция `print` может выводить не только значения переменных, но и значения любых выражений. Например, допустима запись
`print(2 + 2 ** 2)`. Также при помощи функции `print` можно выводить значение не одного, а нескольких выражений, для
этого нужно перечислить их через запятую:

.. code-block:: python

   a = 1
   b = 2
   print(a, '+', b, '=', a + b)

В данном случае будет напечатан текст `1 + 2 = 3`: сначала выводится значение переменной `a`, затем строка из знака `+`,
затем  значение переменной `b`, затем строка из знака `=`, наконец, значение суммы `a + b`.

Обратите внимание, выводимые значения разделяются одним пробелом. Но такое поведение можно изменить: можно разделять
выводимые значения двумя пробелами, любым другим символом, любой другой строкой, выводить их в отдельных строках или не
разделять никак. Для этого нужно функции `print` передать специальный именованный параметр, называемый `sep`, равный
строке, используемый в качестве разделителя (sep —  сокращение слова separator, т.е. разделитель). По умолчанию
параметр `sep` равен строке из одного пробела и между значениями выводится пробел. Чтобы использовать в качестве
разделителя, например, символ двоеточия нужно передать параметр `sep`, равный строке `':'`:

.. code-block:: python

   print(a, b, c, sep = ':')

Аналогично, для того, чтобы совсем убрать разделитель при выводе нужно передать параметр `sep`, равный пустой строке:

.. code-block:: python

   print(a, '+', b, '=', a + b, sep = '')

Для того, чтобы значения выводились с новой строки, нужно в качестве параметра `sep` передать строку, состоящую из
специального символа новой строки, которая задаётся так:

.. code-block:: python

   print(a, b, sep = '\n')

Символ обратного слэша в текстовых строках является указанием на обозначение специального символа, в зависимости
от того, какой символ записан после него. Наиболее часто употребляется символ новой строки `'\n'`.
А для того, чтобы вставить в строку сам символ обратного слэша, нужно повторить его два раза: `'\\'`.

Вторым полезным именованным параметром функции `print` является параметр `end`,
который указывает на то, что выводится после вывода всех значений, перечисленных в функции `print`.
По умолчанию параметр `end` равен `'\n'`, то есть следующий вывод будет происходить
с новой строки. Этот параметр также можно исправить, например, для того, чтобы убрать все дополнительные
выводимые символы можно вызывать функцию `print` так:

.. code-block:: python

   print(a, b, c, sep = '', end = '')

Упражнение №1: гипотенуза с пользовательским вводом
---------------------------------------------------

Дано два числа `a` и `b`. Выведите гипотенузу треугольника с заданными катетами.

+------+-------+
| Ввод | Вывод |
+======+=======+
| 3    | 5     |
+------+-------+
| 4    |       |
+------+-------+


PEP 8 — руководство по написанию кода на Python
===============================================

PEP 8 создан на основе рекомендаций `Гвидо ван Россума`_ — создателя языка Python.

.. _`Гвидо ван Россума`: https://ru.wikipedia.org/wiki/%D0%A0%D0%BE%D1%81%D1%81%D1%83%D0%BC,_%D0%93%D0%B2%D0%B8%D0%B4%D0%BE_%D0%B2%D0%B0%D0%BD


Ключевая идея Гвидо такова: **код читается намного больше раз, чем пишется**. Собственно, рекомендации о стиле написания
кода направлены на то, чтобы улучшить читаемость кода и сделать его согласованным между большим числом проектов. В
идеале, весь код будет написан в едином стиле, и любой сможет легко его прочесть.

На русском можно прочитать про PEP8 тут_, на английском — здесь_.

.. _тут: http://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html
.. _здесь: https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/
