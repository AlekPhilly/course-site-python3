Штирлиц
#######

:date: 2016-04-11


.. default-role:: code
.. contents:: Содержание

Описание работы
===============

Данная работа посвящена шифрованию и расшифровке шифротекстов, закодированных простыми классическими шифрами.

Расшифровка текста
==================

Для хранения и передачи секретных данных требуется либо использовать защищённый канал связи, либо опеспечить шифрование самого сообщения, чтобы даже при его перехвате злоумышленник не смог его прочитать. Наука о шифровании данных называется `криптография`__. (Существует ещё вариант сокрытия самого факта передачи информации — стеганография.)

.. __:	https://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%8F


Атбаш
-----

Атбаш — это шифр простой замены, использованный для еврейского алфавита и получивший оттуда своё название. Шифрование происходит заменой первой буквы алфавита на последнюю, второй на предпоследнюю и так далее.

Для русского алфавита таблица замен:

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|а|б|в|г|д|е|ё|ж|з|и|й|к|л|м|н|о|п|р|с|т|у|ф|х|ц|ч|ш|щ|ъ|ы|ь|э|ю|я|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|я|ю|э|ь|ы|ъ|щ|ш|ч|ц|х|ф|у|т|с|р|п|о|н|м|л|к|й|и|з|ж|ё|е|д|г|в|б|а|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Данный шифр тривиален для взлома, поскольку у него нет ключа. Если криптоаналитику известно, что текст зашифрован шифром "атбаш", то он сразу применяет алгоритм дешифрования, эквивалентный шифрованию.

Программа для шифрования шифром "атбаш":

.. code-block:: python

	__author__ = 'Timofey Khirianov'
	# -*- coding: utf8 -*-


	class Atbash:
	    alphabet = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"

	    def __init__(self):
	        lowercase_code = {self.alphabet[i]:self.alphabet[-i-1] for i in range(len(self.alphabet))}
	        uppercase_code = {self.alphabet[i].upper():self.alphabet[-i-1].upper() for i in range(len(self.alphabet))}
	        self._encode = dict(lowercase_code)
	        self._encode.update(uppercase_code)

	    def encode(self, line):
	        if len(line) == 1:
	            return self._encode[line] if line in self._encode else line
	        else:
	            return ''.join([self.encode(char) for char in line])


	cipher = Atbash()
	line = input()
	while line != '.':
	    print(cipher.encode(line))
	    line = input()

Следующий раздел лабораторной работы закодирован шифром "атбаш".

Жцко Иъчяоа
-----------

Жцко Иъчяоа — вмр эцы жцкоя прынмясрэфц, э фрмрорт фяшыдх нцтэру э рмфодмрт мъфнмъ чятъсаъмна нцтэрурт, сяйрыаёцтна ся съфрмрорт прнмрассрт зцнуъ прчцицх уъэъъ цуц пояэъъ съьр э яукяэцмъ. Сяпоцтъо, э жцкоъ нр ныэцьрт эпояэр ся 3, Я юдуя юд чятъсъся ся Ь, Ю нмясъм Ы, ц мяф ыяуъъ.

Жцко сячэяс э зънмг оцтнфрьр цтпъоямроя Ьяа Буца Иъчяоа, цнпругчрэяэжъьр ъьр ыуа нъфоъмсрх пъоъпцнфц нр нэрцтц ьъсъояуятц.

Нуъылбёяа зянмг ояюрмд чяжцкорэяся жцкорт Иъчяоа.

.. code-block:: python

	__author__ = 'Timofey Khirianov'
	# -*- coding: utf8 -*-


	class Caesar:
	    alphabet = "яюэьыъщшчцхфутсрпонмлкйизжёедгвба"

	    def __init__(self, key):
	        lowercase_code = {self.alphabet[i]:self.alphabet[(i+key)%len(self.alphabet)] for i in range(len(self.alphabet))}
	        uppercase_code = {self.alphabet[i].upper():self.alphabet[(i+key)%len(self.alphabet)].upper() for i in range(len(self.alphabet))}
	        self._encode = dict(lowercase_code)
	        self._encode.update(uppercase_code)
	        self._decode = {}  # FIXME

	    def encode(self, line):
	        if len(line) == 1:
	            return self._encode[line] if line in self._encode else line
	        else:
	            return ''.join([self.encode(char) for char in line])

	    def decode(self, line):
	    	pass  # FIXME


	key = int(input('Ээъыцмъ фубз:'))
	cipher = Caesar(key)
	line = input()
	while line:
	    print(cipher.encode(line))
	    line = input()

Ырпцжцмъ тъмры decode ц оянжцколхмъ нуъылбёцх оячыъу уяюроямросрх ояюрмд.
Прылтяхмъ, прзътл эят съ нррюёцуц фубз жцкорэясца ц змр эят н вмцт ыъуямг.


Кыжг вгбдебь ътячан
-------------------

Вбъцгтфюсчя д гтдкыжгбфэбь гтъцчют!

Ыетэ, фн цбхтцтюыдо вбйчяё кыжг Ичътгс ач сфюсчедс эгывебдебьэыя: дюыкэбя ятют яблабдео яабщчдефт эюрйчь ы
аёщань эюрй ючхэб атьеы ячебцбя вбюабхб вчгчубгт.

Ябщаб юы ёфчюыйыео эгывебдебьэбдео, ач ячасс ячебц кыжгбфтаыс? Цт, ябщаб. Чдюы ътячасео бцыа дыяфбю тюжтфыет
ат бвгчцчюшаань цгёхбь дыяфбю ебхб щч тюжтфыет вб этэбь-еб етуюыич ътяча, еб дтят етуюыит ътяча ы сфюсчедс эюрйбя.

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|т|у|ф|х|ц|ч|ш|щ|ъ|ы|ь|э|ю|я|а|б|в|г|д|е|ё|ж|з|и|й|к|л|м|н|о|п|р|с|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|о|ъ|и|ф|э|у|л|з|ж|в|г|с|ю|п|т|ч|н|к|ё|я|м|щ|ш|б|х|ь|а|ц|ы|е|й|р|д|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


Яабщчдефб эюрйчь — пеб яабщчдефб фбъябщанз етуюыи вгбденз ътяча.
Цюс гёддэбхб тюжтфыет яблабдео яабщчдефт етуюыи вгбденз ътяча гтфат жтэебгытюё бе 33.
33! = 8683317618811886495518194401280000000

Чдюы егтеыео ат вгбфчгэё бцабхб фтгытает 0.000001 дчэёацн, вбюёйыедс 2.8e+23 юче...
Ябщче вбэтътеодс, йеб кыжг вгбдебь ътячан фвбюач эгывебдебьэыь, бцатэб пеб ач етэ.

Чхб цбдетебйаб вгбдеб фъюбятео вгы вбяблы `йтдебеабхб татюыът`__. Цчюб ф ебя, йеб йтдебет вбсфючаыс ътцтаабь
уёэфн тюжтфыет ф цбдетебйаб цюыаанз ечэдетз бцат ы ет щч цюс гтъанз ечэдебф бцабхб сънэт.
Чдюы ф кыжгбечэдеч уёцче дыяфбю д фчгбсеабдеор вбсфючаыс, татюбхыйабь детацтгеабь цюс сънэт, еб ябщаб вгчцвбюбщыео, йеб ба ы сфюсчедс ёэтътаабь ъткыжгбфтаабь уёэфбь.

.. __: https://ru.wikipedia.org/wiki/%D0%A7%D0%B0%D1%81%D1%82%D0%BE%D1%82%D0%BD%D1%8B%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7

Ячебц йтдебеабхб эгывебтатюыът ыъфчдеча д IX-хб фчэт (гтубен Тю-Эыацы), збес атыубючч ыъфчдеаня дюёйтчя чхб вгыячачаыс ф гчтюоабь щыъаы, фбъябщаб, сфюсчедс цчкыжгбфэт чхывчедэыз ычгбхюыжбф Щ.-Ж. Ктявбюобабя ф 1822 хбцё. Ф зёцбщчдефчаабь юыечгтеёгч атыубючч ыъфчдеаняы ёвбяыатаысяы сфюсредс гтддэтън «Ъбюбебь щёэ» Пцхтгт Вб, «Вюскёлыч йчюбфчйэы» Эбата Цбьюс, т етэщч гбята «Цчеы этвыетат Хгтает» Щрюо Фчгат.

Ыетэ, дючцёрлтс йтдео гтубен ъткыжгбфтат вгы вбяблы дючцёрлчь вгбхгтяян:

.. code-block:: python

	import random
	__author__ = 'Timofey Khirianov'
	# -*- coding: utf8 -*-


	class Monoalphabet:
	    alphabet = ""  # FIXME

	    def __init__(self, keytable):
	        lowercase_code = {self.alphabet[i]:keytable[i] for i in range(len(self.alphabet))}
	        uppercase_code = {self.alphabet[i].upper():keytable[i].upper() for i in range(len(self.alphabet))}
	        self._encode = dict(lowercase_code)
	        self._encode.update(uppercase_code)
	        self._decode = {}  # FIXME

	    def encode(self, line):
	        if len(line) == 1:
	            return self._encode[line] if line in self._encode else line
	        else:
	            return ''.join([self.encode(char) for char in line])

	    def decode(self, line):
	        pass  # FIXME


	key = Monoalphabet.alphabet[:]
	random.shuffle(key)
	cipher = Monoalphabet(key)
	line = input()
	while line:
	    print(cipher.encode(line))
	    line = input()

Йеб щч фтя цчютео?.. Ябщче унео беэтътеодс бе фнвбюачаыс гтубен ы вбюёйыео цфт?
Ыюы вгчцдетфыео дчус Кчгюбэбя Збюядбя, эбебгнь вгыячаые дфбь ъатячаыень ячебц цчцёэиыы?
Фнубг ът фтяы!

Вгбхгтяяё цюс йтдебеабхб татюыът дючцёче атвыдтео дтябдебсечюоаб. Ёдвчзбф!

Жйрв Ъйедадвч (илойчорчъйыалэ ьчздац)
-------------------------------------

Счояадэжйз ивлслоедайдз жйрвлъ ивлюылэ ьчздац ёъоёдыюё залглчорчъйыацд жйрвц. Чнх Чоя-Шйасй ъ юълйф вчнлычф илшчьчо, пыл лнцпацд злалчорчъйыацд жйрвц слълояал-ычшй ивлюыл илссчуыюё пчюылыалзх швйиылчачойьх й идвъцз ивдсолейо йюилояьлъчыя залглчорчъйыацд жйрвц. Ъ Дъвлид ычшйд жйрвц нцой ъидвъцд лийючац ъ 1467 глсх йычояёаюшйз чвфйыдшылвлз Одла Нчыыйюыч Чояндвый. Ъ XVI ъдшд адздбшйэ чннчы Йлгчаа Ывйыдзйэ ъ юълдэ шайгд “Юыдалгвчрйё” ивдсюычъйо юфдзх илойчорчъйыалгл жйрвлъчайё ъ ъйсд ычнойбц. Нлодд юолеацэ ъчвйчаы ю йюилояьлъчайдз юзджчаацф чорчъйылъ нцо лийюча ъ 1563 глсх Сечзнчыыйюыч сдооч Илвыч ъ дгл шайгд “Ивл юшвцыху ьачпйзлюыя лысдояацф нхшъ”. Илюодсайз юолълз ъ вчьъйыйй илойчорчъйыацф жйрвлъ злеал юпйычыя влылвацд зчжйац, ивйздвлз шлылвлэ злеал юпйычыя адздбшху зчжйах Enigma, вчьвчнлычаачё ъ 1917 г. Юхыя илойчорчъйыацф жйрвлъ ьчшоупдач ъ залглшвчыалз ивйздадайй вчьойпацф жйрвлъ ивлюылэ ьчздац ш ливдсдодаалзх пйюох нхшъ жйрвхдзлгл ыдшюыч. Ыл дюыя ш шчеслэ нхшъд ил лысдояалюый ивйздаёдыюё лсйа йь жйрвлъ ивлюылэ ьчздац.

Жйрв Ъйедадвч юлюылйы йь илюодслъчыдояалюый адюшлояшйф жйрвлъ Бдьчвё ю вчьойпацзй ьачпдайёзй юсъйгч. Соё ьчжйрвлъцъчайё зледы йюилояьлъчыяюё ычнойбч чорчъйылъ, ачьцъчдзчё шъчсвчы (ычнойбч) Ъйедадвч. Ивйздайыдояал ш вхююшлзх чорчъйых ычнойбч Ъйедадвч юлюычъоёдыюё йь юывлш ил 33 юйзълолъ, ивйпмз шчесчё юодсхущчё юывлшч юсъйгчдыюё ач адюшлояшл ильйбйэ. Ычшйз лнвчьлз, ъ ычнойбд илохпчдыюё 33 вчьойпацф жйрвлъ Бдьчвё. Ач вчьацф кычичф шлсйвлъшй жйрв Ъйедадвч йюилояьхды вчьойпацд чорчъйыц йь кылэ ычнойбц. Ач шчеслз кычид жйрвлъчайё йюилояьхуыюё вчьойпацд чорчъйыц, ъцнйвчдзцд ъ ьчъйюйзлюый лы юйзълоч шоупдългл юолъч. Ачивйздв, дюой шоупдълд юолъл “ЮЧЫ”, ыл идвъчё нхшъч лышвцылгл ыдшюыч жйрвхдыюё ю йюилояьлъчайдз чорчъйыч “Ю’, ъылвчё “Ч”, ывдыяё “Ы”, пдыъмвычё юалъч “Ю” й ычш счодд.


Ивлгвчззч жйрвлъчайё жйрвлз Ъйедадвч:
+++++++++++++++++++++++++++++++++++++

.. code-block:: python

	__author__ = 'Timofey Khirianov'
	# -*- coding: utf8 -*-

	class Vigenere:
	    alphabet = "чнъгсдмеьйэшозаливюыхрфбпжщтцякуё"
	    
	    def __init__(self, keyword):
	        self.alphaindex = {self.alphabet[index]: index for index in range(len(self.alphabet))}
	        self.key = [self.alphaindex[letter] for letter in keyword.lower()]

	    def caesar(self, letter, shift):
	        if letter in self.alphaindex:  # юывлпачё нхшъч
	            index = (self.alphaindex[letter] + shift)%len(self.alphabet)
	            cipherletter = self.alphabet[index]
	        elif letter.lower() in self.alphaindex:  # ьчгочъачё нхшъч
	            cipherletter = self.caesar(letter.lower(), shift).upper()
	        else:
	            cipherletter = letter
	        return cipherletter

	    def encode(self, line, key = None):
	        if not key:
	            key = self.key
	        ciphertext = []
	        i = 0
	        for letter in line:
	            shift = key[i]
	            cipherletter = self.caesar(letter, shift)
	            ciphertext.append(cipherletter)
	            i = (i + 1)%len(key)
	            
	        return ''.join(ciphertext)

	    def decode(self, line):
	        pass  # FIXME


	keyword = input('keyword=')
	cipher = Vigenere(keyword)

	line = input()
	while line != '.':
	    print(cipher.decode(line))
	    line = input()

Илюодсайэ вчьсдо вчнлыц ьчжйрвлъча жйрвлз Ъйедадвч ю адйьъдюыацз шлслъцз юолълз.
Илсюшчьшч соё ючзцф юылэшйф швйиылчачойыйшлъ: сойач шлслългл юолъч 8.

Йыгь Оеюятыл (осябялуывиы пчъчньд)
----------------------------------

Оеэю яиэ кчаьм эацаюлъопьы пъоощнаэ эьедъжчгрюкцы. Ъщ биэ чуънртдчь н кьяиу ысрпаь шфэопаь нъцни Хччмсраая Нрэннюбы. Чльх Жрщъоы яоюрщааъйуэцх саэоулш тфб лмюощпеьяй кюъвбъоэавъйуэцаю геэхцысан р эооты ялмытт 1945 гьхт. Пшя гбцплъим кчаьыттьдбл ытшвнбжх ттьдб ънътхыькрясм бюрьмццць «фюкщпйойесе ЪЮЧ» ю шэрёъш (ысъйнлсмию эпщырнщбржш бщаэьъюым ъюч дхфюауъъцъоаая). Ьрц пбъш ияббъзуывняыу ърньвтцъныгь уъъцъоас, н нощнкчщэявт дъягмеп, ьрвслтгбэмьмзыа, юлч шсэ юьсббцеак, чаауй цшюе уйч яашахэ тс юсъырьм, иеэ ф оаьгйюжц ацэаю. Тньщу юэеоечбэк, едбпж члли пжч аогбъйюъо гювглцнию, ыьхмтясъэк тьэощъ ыдця ялу и жгощфшсм ф эрчртдч ъю вяцз, цэоъц юъчачндчък х ьдвялнхттэс. Н спръч э эаъя цъщмтвйуэцые бгчшръеыъч дфбрн Фуьщммн ау юмк втаыьысавтьрщы п ббчфдит бб эвеъ д ъючридны цшюеая ф ын ъдюъчизбцеак, в адьънъоъ, тчк птвчтлгх яабперъич баъмый утхщъютц хээяраюгеррщъыъъ аюьакаегошф.

Бгэоьммъе тчк шцёгэнлъим кчаьым Учящлща юбхщъ ннбыалюи ясяээюыяацюкщъ.

Цдъф оаъ вэщьмвцэбаз фаыъяоюзюя ьгчыюыаысючуъщ, бгчочмшнця ц ачнгечй о шаащяьюаг CTF_.

.. _CTF: https://vk.com/mipt_ctf