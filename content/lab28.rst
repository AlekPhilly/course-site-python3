Тренировочная контрольная работа
################################

:date: 2017-05-02

.. default-role:: code
.. contents:: Содержание



Примеры задач
=============

Сложность задач и их темы соответствуют задачам из контрольной работы.

1. Ход ладьи
------------

Шахматная ладья ходит по горизонтали или вертикали. Даны две различные клетки шахматной доски, определите, может ли ладья попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести YES, если из первой клетки ходом ладьи можно попасть во вторую или NO в противном случае.

Для простоты можно не рассматривать случай, когда данные клетки совпадают.

Ввод
++++

.. code-block::

	1
	1
	1
	8

Вывод
+++++

.. code-block::

	YES

Ввод
++++

.. code-block::

	3
	4
	4
	3

Вывод
+++++

.. code-block::

	NO


2. Список факториалов
---------------------

По данному числу N распечатайте все факториалы, не превосходящие N, в порядке возрастания.

Ввод
++++

.. code-block::

	24

Вывод
+++++

.. code-block::

	1 2 6 24


3. Симметричная последовательность
----------------------------------

Последовательность чисел назовем симметричной, если она одинаково читается как слева направо, так и справа налево. Например, следующие последовательности являются симметричными:

	1 2 3 4 5 4 3 2 1

	1 2 1 2 2 1 2 1

Вашей программе будет дана последовательность чисел. Требуется определить, какое минимальное количество и каких чисел надо приписать в конец этой последовательности, чтобы она стала симметричной.

Программа получает на вход количество элементов исходной последовательности N (1≤N≤100). Далее идут N чисел — элементы этой последовательности, натуральные числа от 1 до 9.

Выведите сначала число M — минимальное количество элементов, которое надо дописать к последовательности, а потом M чисел (каждое от 1 до 9) — числа, которые надо дописать к последовательности.

Ввод
++++

.. code-block::

	9
	1 2 3 4 5 4 3 2 1

Вывод
+++++

.. code-block::

	0

Ввод
++++

.. code-block::

	5
	1 2 1 2 2

Вывод
+++++

.. code-block::

	3
	1 2 1

Ввод
++++

.. code-block::

	5
	1 2 3 4 5

Вывод
+++++

.. code-block::

	4
	4 3 2 1


4. Сначала нечетные
-------------------

Дан массив. Отсортировать его так, чтобы сначала шли нечетные по возрастанию, потом четные во убыванию.

Вход: на первой строке натуральное нечетное N (N < 100, нечетное) – количество элементов. На второй N элементов.

Выход: Отсортированный требуемым образом массив.

Ввод
++++

.. code-block::

	3
	3 2 1

Вывод
+++++

.. code-block::

	2 1 3


5. Автомат со сдачей
--------------------

Одна фирма обслуживает автоматы по продаже чая и кофе.

Стоимость стакана чая и кофе в автомате равна пяти рублям. Автомат принимает монеты по 5 и 10 рублей, а также купюры в 10, 50 и 100 рублей. Когда покупателю надо выдавать сдачу (т.е. когда пассажир бросил в автомат десятирублёвую монету или 10-, 50- или 100-рублёвую купюру), автомат выдаёт сдачу пятирублёвыми монетами; если же покупатель бросил в автомат пятирублёвую монету, то автомат её сохраняет и может использовать для сдачи следующим покупателям.

Ясно, что, чтобы обеспечить возможность выдачи сдачи всем покупателям, может потребоваться изначально загрузить в автомат некоторое количество пятирублёвых монет. Сейчас автоматы проходят испытания с целью определить минимальное количество монет, которые надо загрузить в автомат перед началом дня. Вам дан протокол одного из таких испытаний: известен порядок, в котором покупатели оплачивали свои покупки различными монетами и купюрами. Определите, какое минимальное количество пятирублёвых монет должно было изначально находиться в автомате, чтобы всем покупателям хватило сдачи.

В первой строке входных данных находится одно натуральное число N — количество покупок в автомате, которые были совершены в ходе испытания (1≤N≤50000). Во второй строке находятся N натуральных чисел, каждое из которых равно номиналу монеты или купюры, которую использовал очередной покупатель для оплаты; каждый номинал может принимать одно из четырёх значений: 5, 10, 50 или 100.

Выведите одно число — минимальное количество пятирублёвых монет, которые надо было загрузить в автомат изначально, чтобы всем покупателям хватило сдачи.

Ввод
++++

.. code-block::

.. code-block::

	3
	10 5 100

Вывод
+++++

.. code-block::

	19

Ввод
++++

.. code-block::

	3
	5 5 10

Вывод
+++++

.. code-block::

	0

Ввод
++++

.. code-block::

	4
	50 5 5 5

Вывод
+++++

.. code-block::

	9


6. Полный граф
--------------

Неориентированный граф с кратными рёбрами называется полным, если любая пара его различных вершин соединена хотя бы одним ребром. Для заданного списком ребер графа проверьте, является ли он полным.

Входные данные
++++++++++++++

Сначала вводятся числа n ( 1 <= n <= 100) – количество вершин в графе и m ( 1 <= m <= 10000) – количество ребер. Затем следует m пар чисел – ребра графа.

Выходные данные
+++++++++++++++

Выведите  «YES», если граф является полным, и «NO» в противном случае.

Ввод
++++

.. code-block::

	5 18
	1 2
	1 3
	1 3
	1 4
	1 4
	1 4
	1 5
	1 5
	2 3
	2 4
	2 4
	2 5
	3 4
	3 4
	3 4
	3 5
	3 5
	4 5

Вывод
+++++

.. code-block::

	YES


7. Банкет
---------

На банкет были приглашены N Очень Важных Персон (ОВП). Были поставлены 2 стола. Столы достаточно большие, чтобы все посетители банкета могли сесть за любой из них. Проблема заключается в том, что некоторые ОВП не ладят друг с другом и не могут сидеть за одним столом. Вас попросили определить, возможно ли всех ОВП рассадить за двумя столами.

Входные данные
++++++++++++++

В первой строке входных данных содержатся два числа: N и M (1 <= N,M <= 100), где N – количество ОВП, а M – количество пар ОВП, которые не могут сидеть за одним столом. В следующих M строках записано по 2 числа – пары ОВП, которые не могут сидеть за одним столом.

Выходные данные
+++++++++++++++

Если способ рассадить ОВП существует, то  выведите YES в первой строке и номера ОВП, которых необходимо посадить за первый стол, во второй строке. В противном случае в первой и единственной строке выведите NO.

Ввод
++++

.. code-block::

	3 2
	1 2
	1 3

Вывод
+++++

.. code-block::

	YES
	1 


8. Кратчайший цикл
------------------

Дан ориентированный граф. Необходимо вывести любой из кратчайших циклов. Если ни одного цикла нет, то выведите -1.

Сложность получившегося алгоритма должна быть `O(|V|*(|V| + |E|))`.

Ввод
++++

.. code-block::

	7
	A B
	B C
	C D
	D E
	B F
	F E
	E A

Вывод
+++++

.. code-block::

	A B F E A


9. Минимальный и максимальный путь к листу
------------------------------------------

Реализуйте бинарное дерево поиска для целых чисел. Программа получает на вход последовательность целых чисел и строит из них дерево. Элементы в деревья добавляются в соответствии с результатом поиска их места. Балансировка дерева не производится.

Найдите длину минимального пути от корня до листа и длину максимального пути от корня до листа. Сумма двух данных чисел - ответ.

Формат входных данных
+++++++++++++++++++++

На вход программа получает последовательность различных натуральных чисел меньших 10000.

Формат выходных данных
++++++++++++++++++++++

Выведите единственное число – сумму минимального и максимального путей от корня до листьев.

Ввод
++++

.. code-block::

	5 15 18 3

Вывод
+++++

.. code-block::

	3


10. Максимальные подпалиндромы
------------------------------

Дана непустая строка, длина которой не превышает 1000000. Требуется для каждой позиции  символа в строке найти длину наибольшего палиндрома с центром в этом символе. Строка состоит из букв английского алфавита, большие и маленькие буквы считаются различными. Ограничение времени - 1 секунда.

Входные данные
++++++++++++++

Одна строка длины N, 0 < N ≤ 1000000.

Выходные данные
+++++++++++++++

N чисел, разделенные пробелами.

Ввод
++++

.. code-block::

	abcd

Вывод
+++++

.. code-block::

	1 1 1 1 

Ввод
++++

.. code-block::

	aaaaa

Вывод
+++++

.. code-block::

	1 3 5 3 1 
