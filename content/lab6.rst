Статистика и визуализация
#########################

:date: 2016-10-05 17:56

.. default-role:: code
.. contents:: Содержание


Генерация случайных чисел в Python
===================================

Генерация случайных чисел - очень важный, с прикладной точки зрения, инструмент.
Она используется в криптографии, при численном интегрировании - Метод Монте-Карло,
для семплирования выборок в машинном обучении, вероятностных алгоритмах,
имитационном моделировании (одно из самых известных тут распределение Пуассона) и многом-многом другом.

В набор стандартных библиотек Python включен модуль random,
который предназначен для генерации случайных чисел из различных распределений, примитивного семплирования,
перемешки данных и т.д.

Давайте рассмотрим основные функции этого модуля:


+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Функция библиотеки math              | Математическая функция                                                                                                                                                                                                                         |
+======================================+================================================================================================================================================================================================================================================+
| `random.seed([X], version=2)`        |  Инициализация генератора случайных чисел. Если X не указан, используется системное время.                                                                                                                                                     |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.getstate()`                  |  Возвращает внутреннее состояние генератора.                                                                                                                                                                                                   |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.setstate(state)`             |  Устанавливает внутреннее состояние генератора. Параметр state должен быть получен функцией getstate().                                                                                                                                        |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.randrange(start, stop, step)`|  Возвращает случайно выбранное число из последовательности.                                                                                                                                                                                    |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.randint(A, B)`               |  Случайное целое число N, A ≤ N ≤ B.                                                                                                                                                                                                           |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.choice(sequence)`            |  Случайный элемент непустой последовательности.                                                                                                                                                                                                |
+------------------------------+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.shuffle(sequence, [rand])`   |  Перемешивает последовательность (изменяется сама последовательность). Поэтому функция не работает для неизменяемых объектов.                                                                                                                  |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.sample(population, k)`       |  Список длиной k из последовательности population.                                                                                                                                                                                             |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.random()`                    | Случайное число от 0 до 1.                                                                                                                                                                                                                     |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.uniform(A, B)`               | Случайное число с плавающей точкой, A ≤ N ≤ B (или B ≤ N ≤ A).                                                                                                                                                                                 |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.triangular(low, high, mode)` | Случайное число с плавающей точкой, low ≤ N ≤ high. Mode - распределение. Пример: random.triangular(0, 10, mode=random.uniform(6, 0))                                                                                                          |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.betavariate(alpha, beta)`    | Бета-распределение. alpha>0, beta>0. Возвращает от 0 до 1. Часто используется в инормационном поиске.                                                                                                                                          |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.expovariate(lambd)`          | Экспоненциальное распределение. lambd равен 1/среднее желаемое.                                                                                                                                                                                |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.gammavariate(alpha, beta)`   | Гамма-распределение. Условия на параметры alpha>0 и beta>0.                                                                                                                                                                                    |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.gauss(mu, sigma)`            | Распределение Гаусса.                                                                                                                                                                                                                          |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.lognormvariate(mu, sigma)`   | Логарифм нормального распределения. Если взять натуральный логарифм этого распределения, то вы получите нормальное распределение со средним mu и стандартным отклонением sigma. mu может иметь любое значение, и sigma должна быть больше нуля.|
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.normalvariate(mu, sigma)`    | Нормальное распределение. mu - среднее значение, sigma - стандартное отклонение.                                                                                                                                                               |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.vonmisesvariate(mu, kappa)`  | mu - средний угол, выраженный в радианах от 0 до 2π, и kappa - параметр концентрации, который должен быть больше или равен нулю. Если каппа равна нулю, это распределение сводится к случайному углу в диапазоне от 0 до 2π.                   |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.paretovariate(alpha)`        | Распределение Парето.                                                                                                                                                                                                                          |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `random.weibullvariate(alpha, beta)` | Распределение Вейбулла.                                                                                                                                                                                                                        |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


Давайте попробуем нарисовать что из себя представляет нормальное распределение:

.. code-block:: python

    import random
    import matplotlib.pyplot as plt

    random.seed(0)
    n = 1000
    values = [random.normalvariate(0, 1) for i in range(n)]
    plt.hist(values, bins=100)
    plt.show()

Давайте рассмотрим некоторые участки кода.

`random.seed(0)` - устанавливает состояние генератора случайных чисел в одинаковое состояние у всех.
Поэтому, у всех будут одинаковые результаты работы случайного генератора.
Если вы не выполните эту команду, то генератор инициализирует себя текущим временем, в таком случае,
у всех генерация случайных чисел будет работать по-разному.

`plt.hist(values, bins=100)` - рисует гистограмму, которая содержит 100 столбиков.

::

    В статистике гистограмма — геометрическое изображение эмпирической функции плотности
    вероятности некоторой случайной величины, построенное по выборке.

    Гистограмма строится следующим образом. Сначала множество значений, которое может принимать элемент выборки,
    разбивается на несколько интервалов (bins). Чаще всего эти интервалы берут одинаковыми,
    но это не является строгим требованием. Эти интервалы откладываются на горизонтальной оси,
    затем над каждым рисуется прямоугольник. Если все интервалы были одинаковыми, то высота каждого прямоугольника
    пропорциональна числу элементов выборки, попадающих в соответствующий интервал. Если интервалы разные,
    то высота прямоугольника выбирается таким образом, чтобы его площадь была пропорциональна числу элементов выборки,
    которые попали в этот интервал.

    Wikipedia



Упражнение 1. Гистограммы
=========================

Нарисовать при помощи 'matplotlib' 4 гистограммы стандартного нормального распределения (mu=0, sigma=1)
с N=[100, 1000, 10000, 100000] и убедиться, что чем больше данных,
тем больше распределение похоже на "Мексиканскую шляпу".

Упражнение 2. Метод Монте-Карло.
================================
В данном задании вам предлагается посчитать интеграл методом Монте-Карло на заданном отрезке.

Функция:
f(x) = -x**2 + 4, при -2<=x<=2, 0 во всех остальных случаях

Интервал: [-3, 3]

Метод Монте-Карло заключается в следующем:
1. Мы берем N случайных точек из области интегрирования, распределенных по равномерному закону и вычисляем значение интегрируемой функции в этих точках.
2. Утверждается, что:

.. image:: {filename}/images/lab6/int.png
   :width: 30%

Где [a, b] - область интегрирования, f(x) интегрируемая функция, u_i - рандомная точка из [a, b], всего таких точек N.

Упражнение 3. Эквализация гистограмм.
=====================================

Теория
------

Гистограмма цветов
++++++++++++++++++
Гистогра́мма (в фотографии) — это график статистического распределения элементов цифрового изображения
с различной яркостью, в котором по горизонтальной оси представлена яркость,
а по вертикали — относительное число пикселов с конкретным значением яркости.

В черно-белом изображении яркость непосредственно определяется значением пиксела.
Чем больше значение пиксела (чем он светлее) - тем он ярче.

В цветных изображениях, обычно, каждый пиксел описывается тремя параметрами:
долей красного в цвете, долей зеленого в цвете, долей синего в цвете.
Тогда, для вычисления яркости используется взвешенная сумма каждого из значений пикселов.

Вот примеры гистограмм изображений.

.. image:: {filename}/images/lab6/histograms.png
   :width: 100%

Как мы видим, если изображение сильно цветное, то гистограмма более или менее равномерна.

Если много черного цвета, то "горб" гистограммы ближе к левому краю, если много белого, то к правому.


Эквализация
+++++++++++
Рассмотрим задачу эквализации (спрямления) распределения.
Т.е. из чисел, которые распределены, например, по такому закону:

.. image:: {filename}/images/lab6/hist1.png
   :width: 50%

При помощи некоторого правила числа меняются. После изменения данные становятся распределенными по равномерному такому закону:

.. image:: {filename}/images/lab6/hist2.png
   :width: 50%

Даная операция применяется в обработке изображений для Увеличения яркости/контрастности и качества изображения вцелом.

.. image:: {filename}/images/lab6/lena.jpg
   :width: 80%

Перцентили
++++++++++

Перцентиль p - это число a, такое, что, если взять из интересующей последовательности A все числа, меньше a,
то количество этих чисел будет составлять p% от общей длинны последовательности A.

Другое объяснение, что Перцентиль p - это число а, такое что, если отсортировать исходную последовательность А, то p% чисел окажутся слева от а.

Для вычисления перцентилей в numpy встроенна функция `numpy.percentile(values, percentile)'`

Рассмотрим пример ее работы:

.. code-block:: python

	>>> values = [3, 4, 1, 2, 5, 6, 7, 8, 9, 10]
	>>> np.percentile(values, 20)
	2.8
	>>> np.percentile(values, 40)
	4.6


Задание
-------

В данном задании предлагается эквализировать картинку орла:

.. image:: {filename}/images/lab6/eagle.png
   :width: 80%

1. Написать функцию get_percentile(values, bucket_number), которая вернет перцентили распределения. Количество перцентилей определяется числом bucket_number.

   Пример:

   .. code-block:: python

          >>> values = [3, 4, 1, 2, 5, 6, 7, 8, 9, 10]
          >>> get_percentile(values, 4)
          [0.0, 3.25, 5.5, 7.75]

   Обратите внимание, что возвращается bunket_number персентилей.
   Первый перцентиль всегда 0.0(при условии, что все числа положительные), 100% не используется, так как лишен смысла в контексте задачи.

2. Написать функцию, get_percentile_number(value, percentiles), которая вернет по значению value, номер последнего перцентиля <= value. Если value меньше всех имеющихся, отнести его к 0-му перцентилю, если больше всех имеющихся, то к последнему.

   Пример:

   .. code-block:: python

          >>> values = [3.0, 4.0, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
          >>> percentiles = get_percentile(values, 4)
          >>> percentiles
          [0.0, 3.25, 5.5, 7.75]
          >>> get_percentile_number(2.5, percentiles)
          0
          >>> get_percentile_number(5.5, percentiles)
          2
          >>> get_percentile_number(100, percentiles)
          3

3. Написать функцию value_equalization(value, percentiles), которая по переданному значению и списку перцентилей, вернет эквалицированное значение.

   Эквализировать предлагается следующим образом:
    1. idx = get_percentile_number(value, percentiles)
    2. new_value = percentiles[idx]

   Пример:

   .. code-block:: python

          >>> values = [3.0, 4.0, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
          >>> percentiles = get_percentile(values, 4)
          >>> percentiles
          [0.0, 3.25, 5.5, 7.75]
          >>> value_equalization(5.5, percentiles)
          0.4
          >>> value_equalization(5.5, percentiles)
          0.4
          >>> value_equalization(5.5, percentiles)
          0.4

5. А теперь добавьте в value_equalization флаг add_random. Если add_random=True, то new_value вычисляется немного по-другому алгоритму:

   new_value = percentiles[idx] + random_noise, где random_noise - это некоторая случайная добавка, которая, тем не менее, сохраняет new_value в пределах: [idx*step, (idx+1)*step]

   этот прием используется, чтобы добавить "естественности" изображению, чтобы не все пикселы, попавшие в один интервал были совершенно одинаковые.

   .. code-block:: python

          >>> values = [3.0, 4.0, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
          >>> percentiles = get_percentile(values, 4)
          >>> percentiles
          [0.0, 3.25, 5.5, 7.75]
          >>> value_equalization(5.5, percentiles, add_random=True)
          0.490164985127
          >>> value_equalization(5.5, percentiles, add_random=True)
          0.473224582373

   По-умолчанию функция должна считать add_random=False.


6. Написать функцию, values_equalization(values, percentiles, add_random=False), которая эквализирует каждое значение из values.

   Пример:

   .. code-block:: python

          >>> values = [3.0, 4.0, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
          >>> percentiles = get_percentile(values, 4)
          >>> percentiles
          [0.0, 3.25, 5.5, 7.75]
          >>> values_equalization(values, percentiles, add_random=False)
          [0.0, 0.25, 0.0, 0.0, 0.25, 0.5, 0.5, 0.75, 0.75, 0.75]
          >>> values_equalization(values, percentiles, add_random=True)
          [0.21, 0.36, 0.19, 0.19, 0.49, 0.61, 0.66, 0.76, 0.78, 0.81]
          >>> values_equalization(values, percentiles, add_random=True)
          [0.02, 0.26, 0.2, 0.24, 0.48, 0.53, 0.7, 0.86, 0.83, 0.95]

7. Прочесть файл `img.txt`__ в переменную data - двумерный numpy массив 200х267. В файле через проблем построчно лежат числа.
8. Используя команду `plt.imshow(data, cmap = plt.get_cmap('gray'))` нарисуйте содержание массива.
9. Нарисовать гистограмму data.

    Для превращения data в одномерный массив используйте метод flatten(): `data.flatten()`.

    Для превращения в двумерный массив используйте reshape(): `new_data = vector.reshape((height, weight))`
10. Эквализировать содержание data написанными ранее функциями.
11. Составить финальную картинку, которая должна выглядеть вот так:

.. image:: {filename}/images/lab6/result.png
   :width: 100%

.. __ : {filename}/extra/lab6/img.txt

12. Нарисуйте картинку, аналогичную 11, но с другим `bucket_number`.
13. При помощи функции `random.choise()` выберите из data 100 случайных строчек и нарисуйте их.
14. При помощи `random.sample()` сгенерируйте 100 случайных номеров строк. Выберите эти строки из data и нарисуйте их.
15. Найдите среднее значение пиксела в эквализированных данных при помощи библиотечных функций.





