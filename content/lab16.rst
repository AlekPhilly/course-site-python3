БИЛЕТЫ К ОСЕННЕМУ ЗАЧЁТУ
####################################

:date: 2017-12-15 11:20

.. default-role:: code
.. contents:: Содержание


Расписание
----------------

Зачёт проходит во вторник 19 декабря по расписанию лабораторных работ и в тех же аудиториях. При возможности (по наличию аудиторий) сдача будет продолжена и с 12:20 до 15:30. Можно прийти с чужой группой, но 

+---------+--------------------+------------+
| группа  |      время         |   ауд.     |
+---------+--------------------+------------+
| 741     |    9:00-12:10      |   321 ЛК   |
+---------+--------------------+------------+
| 742     |    9:00-12:10      |   802 КПМ  |
+---------+--------------------+------------+
| 743     |    9:00-12:10      |   319 ЛК   |
+---------+--------------------+------------+
| 6111    |    17:05-19:50     |   804 КПМ  |
+---------+--------------------+------------+
| 6112    |    17:05-19:50     |   701 КПМ  |
+---------+--------------------+------------+
| 6113    |    17:05-19:50     |   702 КПМ  |
+---------+--------------------+------------+
| 6114    |    17:05-19:50     |   806 КПМ  |
+---------+--------------------+------------+
| 6115    |    17:05-19:50     |   705 КПМ  |
+---------+--------------------+------------+


Процедура приёма зачёта
-----------------------

Оценка по информатике ставится в результате устного ответа на дифференцированном зачёте. Присутствие на зачёте для постановки оценки обязательно!

Сдача происходит по билетам. В билете содержится два вопроса из основного списка. На подготовку студенту отводится не более 20 минут. Преподаватель слушает ответы на вопросы в билете, а также может задать от одного до трёх дополнительных вопросов, как из основного списка, так и любых других по программе курса.

Использование на зачёте любых цифровых и бумажных носителей информации студентом недопустимо! Допустимы только ручка и бумага.


Список вопросов
---------------

#. Ссылочная модель данных в Python. Операторы == и is. Сборщик мусора.
#. Операторы присваивания в Python. Множественное присваивание и варианты обмена переменных значениями.
#. Операторы if, elif, else. Цикл while, операторы break, continue, else.
#. Цикл for, операторы break, continue, else. Функция range().
#. Операции алгебры логики. Таблицы истинности И, ИЛИ, НЕ, XOR, импликации и эквиваленции.
#. Законы алгебры логики. Свойства операций И и ИЛИ. Законы де Моргана.
#. Дизъюнктивная нормальная форма.
#. Позиционные системы счисления. Перевод числа из 10-й в произвольную систему счисления и наоборот.
#. Связь 2-й, 4-й, 8-й и 16-й систем счисления. Примеры и обоснование.
#. Проверка последовательности чисел на наличие элемента с заданными свойствами и на соответствие всех элементов заданному свойству.
#. Однопроходные алгоритмы обработки последовательности: подсчёт, сумма, произведение.
#. Поиск максимума и подсчёт количества элементов, равных максимальному.
#. Нахождение трёх максимальных элементов в последовательности за один проход.
#. Поиск местоположения максимума в последовательности за один проход.
#. Проверка простоты числа. Метод грубой силы.
#. Разложение числа на множители.
#. Решето Эратосфена.
#. Добавление и удаление элемента в начале и в конце массива «вручную» (без append, insert, присваивания в срез и т. п.).
#. Алгоритм обращения чисел в массиве. Реализация циклом, без срезов.
#. Алгоритм циклического сдвига в массиве. Реализация циклом, без срезов.
#. Проверка упорядоченности массива за O(N).
#. Сортировка вставками.
#. Сортировка выбором.
#. Сортировка методом пузырька.
#. Сортировка подсчётом.
#. Быстрая сортировка Хоара.
#. Сортировка слиянием.
#. Рекурсия. Прямой и обратный ход рекурсии. Стек вызовов при рекурсии. Вычисление факториала.
#. Алгоритм Евклида. Реализация через цикл и через рекурсию.
#. Быстрое возведение в степень.
#. Вычисление чисел Фибоначчи.
#. Ханойские башни.
#. Рекурсивная генерация всех чисел длины M.
#. Генерация всех перестановок (рекурсивная).
#. Динамическое программирование. Сходства с рекурсией и отличия от неё.
#. Задача о количестве траекторий Кузнечика на числовой прямой.
#. Задача о траектории наименьшей стоимости для Кузнечика. Восстановление траектории наименьшей стоимости.
#. Вычисление расстояния Левенштейна.
#. Наибольшая общая подпоследовательность.
#. Наибольшая возрастающая подпоследовательность.
#. Проверки корректности скобочной последовательности с помощью стека.
#. Обратная Польская нотация. Вычисление выражения при помощи стека.
#. Наивный поиск подстроки в строке. Реализация без использования стандартных методов str. 
#. Z-функция строки. Наивное вычисление и его оптимизация. Z-алгоритм.
#. Префикс-функция. Алгоритм Кнута-Морриса-Пратта.


Оценка на зачёте
----------------

Основанием для рейтинговой оценки служат три оценки:

#. Контрольная №1
#. Контрольная №2
#. Средняя оценка за все контесты

Преподаватель, экзаменующий студента, видит все эти оценки по отдельности, а также рекомендуемую итоговую оценку, которая вычисляется по этим пяти оценкам автоматически. Исходя из ответа студента итоговая оценка в зачётку может быть отклонена от рекомендуемой на ±2 балла (по 10-балльной шкале). Если преподаватель хочет повысить или понизить оценку на большее число баллов, он советуется с лектором, присутствующим на зачёте.

Студент при несогласии с итоговой оценкой может потребовать апелляции у старшего преподавателя, но за это придётся рискнуть 1 баллом. Если апелляция не будет успешной, и старший преподаватель полностью согласится с преподавателем-экзаменатором в его оценке знаний студента, то итоговая оценка будет *понижена* на 1 балл (по 10-балльной шкале).


Почему дифференцированный зачёт сдаётся устно
---------------------------------------------

#. Во-первых, это возможность проверить знание студентом тем, вошедших в курс лекций, но не вошедших прямо в лабораторные работы.
#. Во-вторых, устный ответ расширяет у студента актив понятийного аппарата информатики, развивает умение связно излагать свои мысли на языке предмета.
#. В-третьих, устный ответ даёт возможность преподавателю осознать уровень самостоятельности студента при написании им лабораторных работ.
#. В-четвёртых, устный ответ позволяет студенту, продемонстрировавшему свои знания на зачёте, повысить оценку, которая получается исходя из рейтинга за работы в семестре.
#. И в пятых, повторение материала лекций в конце семестра приводит к лучшему запоминанию материала и откладыванию его в долгую память.

Успехов в подготовке к зачёту!
