Проект «Солнечная система»
##########################

:date: 2015-10-20 14:31
:lecture_link: https://youtu.be/L-8Nxs4bWhI

.. :lecture_pdf: true

.. default-role:: code
.. contents:: Содержание

Проектирование программы
========================

Командное программирование
--------------------------

Большие проекты создаются только командами программистов, поэтому следует учиться работать над кодом совместно.
Существуют методики `парного программирования`_, хотя чаще встречается разумное разделение труда по программистам за счёт грамотного проектирования_.

.. _парного программирования: https://ru.wikipedia.org/wiki/%D0%9F%D0%B0%D1%80%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5

.. _проектирования: https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D1%8F

Легенда
-------

Группа из двух программистов работала над проектом "Солнечная система". Им была поставлена задача -- смоделировать в плоском приближении и визуализировать движение планет Солнечной или подобной ей системы.
Пользовательский интерфейс должен позволять запускать и приостанавливать ход времени.
Столкновение планет друг с другом и с Солнцем моделировать не требуется.
Начальные данные о положении планет, их массах и начальных скоростях считываются из файла.
По запросу пользователя данные о текущем положении, массах и скоростях планет должны сохраняться в файл.

Однако, оба программиста внезапно уволились по невыясненным обстоятельствам.
Вас вызвали, чтобы спасти ситуацию и закончить программу в срок.
К счастью, проект был уже спроектирован и хорошо документирован.

В репозитории проекта лежат файлы модулей, все функции в которых описаны документ-строками.
Разработка остановилась на этапе прототипа, однако он собирается и может быть запущен.

Разбиение на модули
-------------------

Программу предлагается разбить на пять модуля:

* solar_main.py — главный модуль
* `solar_objects.py`_ — описание объектов
* `solar_model.py`_ — модуль, отвечающий за моделирование физических объектов
* `solar_vis.py`_ — модуль, отвечающий за интерфейс пользователя
* `solar_input.py`_ — модуль, реализующий чтение и запись в конфигурационные файлы


.. _`solar_objects.py`: {filename}/extra/lab8/solar_objects.m.html
.. _`solar_model.py`: {filename}/extra/lab8/solar_model.m.html
.. _`solar_vis.py`: {filename}/extra/lab8/solar_vis.m.html
.. _`solar_input.py`: {filename}/extra/lab8/solar_input.m.html

Распределение ролей
-------------------

Программист А -- старший программист, тимлид.
Зона ответственности: solar_main.py, solar_objects.py, solar_vis.py

Программист В -- второй программист.
Зона ответственности: solar_model.py, solar_input.py

Помните, что важна поэтапность разработки с **работоспособностью при каждом коммите**.



Программист А. План работ
=========================

Постановка задач
----------------

Главная задача тимлида -- организация работ. У него меньше программисткой нагрузки.

В модулях **solar_main.py** и **solar_objects.py** по-видимому всё сделано, исправлений, кажется, не требуется.
Модуль **solar_vis** требует правок по существу.

Этап №0
-------

Для начала тимлид должен **форкнуть репозиторий** к себе на github и **выдать права** на коммит своему подчинённому
программисту.

Проект находится в репозитории solar_project_.

.. _solar_project: https://github.com/mipt-cs-on-python3/solar_project

После этого **форкнутый** репозиторий (это важно!) можно склонировать на оба компьютера: тимлида и второго программиста.


Этап №1
-------

Исправить функцию **scale_y** и функцию **create_planet_image** в модуле **solar_vis.py**.

Этап №2
-------

Помогать второму программисту, работая с ним в паре. Вычитывать его код.
Тестировать проект на ошибки.

Программист В. План работ
=========================

Постановка задач
----------------

В модуле solar_model.py не прописана схема вычислений.
В модуле solar_input.py не реализовано считывание и запись в файлы.

Этап №0
-------

Убедиться, что тимлид сделал форк правильно и склонировать **форкнутый им** репозиторий.
Убедиться, что права доступа на коммит есть. Можно сделать тривиальную правку, закоммитить и запушить её на github.

Этап №1
-------

Исправить считывание из файла: функции **parse_star_parameters** и **parse_planet_parameters**.

Этап №2
-------

Исправить расчёты физической модели, функцию **calculate_force** и **move_space_object**.

Этап №3
-------

Исправить запись в файл: функцию **write_space_objects_data_to_file**.


Результаты
==========

В результате работы должно получиться следующее

Пример солечной системы
-----------------------

.. image:: {filename}/images/lab8/solar_main.gif
   :width: 350 px

Пример двойной звезды
---------------------

.. image:: {filename}/images/lab8/double_star.gif
   :width: 350 px

Дополнительное задание
======================

Исправить конфигурационный файл **one_satellite.txt** так, чтобы спутник двигался по эллиптической орбите.

Научиться сохранять статистику вычисленных значений положений и скоростей в файл stats.txt.

Вывести графики:

1. модуля скорости планеты от времени
2. расстояния спутника до звезды от времени
3. модуля скорости от расстояния до звезды
