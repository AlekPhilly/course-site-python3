БИЛЕТЫ К ОСЕННЕМУ ЗАЧЁТУ
####################################

:date: 2016-12-08 13:40

:test_comment: контрольная группы 5113
:test_link: http://judge2.vdi.mipt.ru/cgi-bin/new-register?contest_id=513116

.. default-role:: code
.. contents:: Содержание

Список основных вопросов
------------------------

#. Наивный поиск подстроки в строке. Реализация на Python без использования стандартных методов str.
#. Алгоритм обращения чисел в массиве. Реализация на Python.
#. Алгоритм циклического сдвига в массиве. Реализация на Python.
#. Поиск корня уравнения методом бисекции. Требования алгоритма к функции. Реализация на Python и ассимптотика алгоритма.
#. Поиск значения в упорядоченном массиве методом бисекции. Алгоритм и его реализация на Python.
#. Изложить алгоритм, его особенности, ассимптотику и применимость для алгоритмов сортировки выбором, вставками и пузырьком. Без реализации на Python.
#. Изложить алгоритм, его особенности, ассимптотику и применимость для алгоритмов пирамидальной сортировки, сортировки обезьяны и дурака. Без реализации на Python.
#. Изложить алгоритм, его особенности, ассимптотику и применимость для алгоритмов сортировки слиянием и подсчётом. Без реализации на Python.
#. Изложить алгоритм, его особенности, ассимптотику и применимость для алгоритмов сортировки Хоара и поразрядной сортировки. Без реализации на Python.
#. Сортировка обезьяны. Ассимптотика алгоритма. Реализация на Python.
#. Сортировка вставками. Ассимптотика алгоритма. Реализация на Python.
#. Сортировка выбором. Ассимптотика алгоритма. Реализация на Python.
#. Сортировка методом пузырька. Ассимптотика алгоритма. Реализация на Python.
#. Сортировка дурака. Ассимптотика алгоритма. Реализация на Python.
#. Сортировка подсчётом. Применимость и ассимптотика алгоритма. Реализация на Python.
#. Поразрядная сортировка. Применимость и ассимптотика алгоритма. Реализация на Python.
#. Быстрая сортировка Хоара. Ассимптотика алгоритма. Реализация на Python.
#. Сортировка слиянием. Ассимптотика алгоритма. Реализация на Python.
#. Рекурсия. Прямой и обратный ход рекурсии. Стек вызовов при рекурсии.
#. Алгоритм Евклида. Реализация на Python через цикл и через рекурсию.
#. Быстрое возведение в степень. Ассимптотика алгоритма. Реализация на Python.
#. Вычисление чисел Фибоначчи. Реализация на Python через цикл и через рекурсию.
#. Ханойские башни. Алгоритм и его реализация на Python.
#. Динамическое программирование. Сходство с рекурсией и отличие от неё. Когда рекурсия применима, а динамическое программирование нет.
#. Задача о количестве траекторий Кузнечика на числовой прямой. Реализация на Python.
#. Задача о траектории наименьшей стоимости для Кузнечика. Восстановление траектории наименьшей стоимости. Реализация на Python.
#. Двумерное динамическое программирование. Задача о количестве траекторий шахматного короля. Реализация на Python.
#. Наибольшая общая подпоследовательность. Ассимптотика алгоритма. Реализация.
#. Наибольшая возрастающая подпоследовательность.  Ассимптотика алгоритма. Реализация на Python.
#. Перегрузка операторов для классов в Python.
#. Конструктор класса в Python. Классовые и экземплярные атрибуты.
#. Наследование классов в Python. Вызов конструктора надкласса.
#. Исключения в Python. Генерирование и перехват исключений.
#. Односвязный список на Python. Реализация при помощи класса LinkedList. Ассимптотика операций. 
#. Стек. Использование стека для проверки корректности скобочной последовательности.
#. Двусвязный список на Python. Очередь.
#. Пирамида (куча). Реализация на Python. Ассимптотика добавления и удаления элемента в кучу.
#. Пирамидальная сортировка.  Ассимптотика алгоритма. Реализация.
#. Открытая и закрытая хеш-таблица. Описать добавление элемента. Ассимптотика поиска. Без реализации на Python.


Вопросы по первой части семестра
--------------------------------

Обязательно учить тем, кто "завалил" полузачёт.
Остальным могут быть заданы в качестве дополнительного вопроса.

Вопросы по синтаксису Python 3
++++++++++++++++++++++++++++++

#. Ссылочная модель данных и динамическая типизация в Python. Сборщик мусора.
#. Литералы чисел. Поддержка позиционных систем счисления в Python.
#. Строки в Python. Экранируемые символы. Виды литералов строк в Python и их особенности.
#. Условный оператор if и каскадная условная конструкция elif в Python.
#. Цикл while и управляющие операторы break и continue. Использование else после while.
#. Цикл for и его особенности в Python. Функция range().
#. Строки в Python. Методы find, count, replace, strip, upper, lower.
#. Строки в Python. Срезы с двумя и тремя параметрами.
#. Кортежи переменных и множественное присваивание.
#. Списки в Python. Методы списков и операции со списками.
#. Списки в Python. Срезы списков. Присваивание в срез. Проблема копирования списка.
#. Списки в Python. List comprehensions: генерация списков.
#. Двумерные массивы (списки списков). Вложенная генерация.
#. Именованные параметры функций. Значения параметров по умолчанию.


Алгоритмические и теоретические вопросы
+++++++++++++++++++++++++++++++++++++++

#. Позиционные системы счисления. Перевод числа из 10-й в произвольную систему счисления и наоборот.
#. Связь двоичной, восьмеричной и шестнадцатеричной систем счисления. Примеры и обоснование.
#. Основы алгебры логики. Таблицы истинности И, ИЛИ, НЕ, XOR, импликации и эквиваленции.
#. Основы алгебры логики. Свойства операций И и ИЛИ.
#. Основы алгебры логики. Операция НЕ. Законы де Моргана.
#. Табличное задание логической функции. Дизъюнктивная нормальная форма.
#. Однопроходные алгоритмы: подсчёт, сумма, произведение.
#. Среднеквадратическое отклонение: однопроходный алгоритм.
#. Однопроходные алгоритмы: поиск максимума и подсчёт количества элементов, равных максимальному.
#. Однопроходные алгоритмы: нахождение трёх максимальных элементов.
#. Однопроходные алгоритмы: поиск местоположения максимума.
#. Алгоритм прверки простоты числа. Обоснование возможности остановки перебора на корне из числа.
#. Алгоритм разложения числа на множители.
#. Алгоритм обращения массива.
#. Структурное программирование. Декомпозиция задачи и проектирование «сверху-вниз».


Процедура приёма зачёта
-----------------------

Оценка по информатике ставится в результате устного ответа на дифференцированном зачёте. Присутствие на зачёте для постановки оценки обязательно!

Сдача происходит по билетам. В билете содержится два вопроса из основного списка. На подготовку студенту отводится не более 30 минут. Преподаватель слушает ответы на вопросы в билете, а также может задать от одного до трёх дополнительных вопросов, как из основного списка, так и из вопросов первой части семестра (к полузачёту).

Использование на зачёте любых цифровых и бумажных носителей информации студентом недопустимо! Допустимы только ручка и бумага.

Оценка на зачёте
----------------

Основанием для оценки на зачёте служат пять оценок:

#. Средняя оценка за все лабораторные работы (выставляется преподавателем лабораторных работ)
#. Контрольная №1
#. Контрольная №2
#. Средняя оценка за все домашние задания
#. Полузачёт

Преподаватель, экзаменующий студента, видит все эти оценки по отдельности, а также рекомендуемую итоговую оценку, которая вычисляется по этим пяти оценкам автоматически. Исходя из ответа студента итоговая оценка в зачётку может быть отклонена от рекомендуемой на ±2 балла (по 10-балльной шкале). Если преподаватель хочет повысить или понизить оценку на большее число баллов, он советуется с лектором, присутствующим на зачёте.

Студент при несогласии с итоговой оценкой может потребовать апелляции у лектора, но за это придётся рискнуть 1 баллом. Если апелляция не будет успешной, и лектор полностью согласится с преподавателем-экзаменатором в его оценке знаний студента, то итоговая оценка будет *понижена* на 1 балл (по 10-балльной шкале).


Почему дифференцированный зачёт сдаётся устно
---------------------------------------------

#. Во-первых, это возможность проверить знание студентом тем, вошедших в курс лекций, но не вошедших прямо в лабораторные работы.
#. Во-вторых, устный ответ даёт возможность преподавателю осознать уровень самостоятельности студента при написании им домашних работ.
#. В-третьих, устный ответ расширяет у студента актив понятийного аппарата информатики, развивает умение связно излагать свои мысли на языке предмета.
#. В-четвёртых, устный ответ позволяет студенту, продемонстрировавшему свои знания на зачёте, повысить оценку, которая получается исходя из рейтинга за работы в семестре.
#. И в пятых, повторение материала лекций в конце семестра приводит к лучшему запоминанию материала и откладыванию его в долгую память.

Успехов в подготовке к зачёту!
