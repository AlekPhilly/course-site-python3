Практика: AI Contest
####################

:date: 2017-02-20 09:00
:status: draft

.. default-role:: code

.. contents:: Содержание

Введение
========

В данной лабораторной предлагается попрактиковаться в написании искуственного интеллекта (AI = Artificial Intelligence). Ваша программа (стратегия) будет управлять танком, движущемся на плоском поле. На поле одновременно находятся танки двух противников, танки могут двигаться в произвольном направлении с постоянной скороостью (ускорения нет). Стрелять также можно в произвольном направлении, независимо от направления движения. Скорость снаряда также является константой и не зависит от движения танка. Танки представляют собой круги радиуса 20, снарды - круги радиуса 2. Поле битвы имеет форму прямоугольника 800x600.

Пример стратегии - bot0
=======================

Рассмотрим следующую стратегию:

.. code-block:: python

    def move(me, enemies, bullets, bonuses, m):
        if me['pos'][1] < 500:
            m.down()

        m.shot(400, 300)


Эта стратегия едет вниз, пока не достигнет координаты 500 по оси y, и все время стреляет в сторону центра экрана (координаты (400, 300)). Итак видно, что все что вам нужно - это написать функцию move, которая решает, что делать вашему танку в данный момент. Вам передается следующая информация:

.. code-block::
    me - Ваш танк.
    enemies - танки соперников (там будет пока только один элемент)
    bullets - пули
    bonuses - бонусы (пока, пустой массив)
    m - ваш ход

    Каждый танк описывается словарем со следующими ключами:
    t['health'] - здоровье
    t['timeout'] - оставшееся время (количество ходов) на перезарядку
    t['pos'][0] - координата центра по оси x
    t['pos'][1] - координата центра по оси y

    Каждая пуля описывается словарем со следующими ключами:
    t['pos'][0] - координата центра по оси x
    t['pos'][1] - координата центра по оси y
    t['dir'][0] - направление по оси x
    t['dir'][1] - направление по оси y
    (дляна вектора dir равна 1)

    Какие можно делать ходы?
    m.up() - вверх
    m.left() - влево
    m.down() - вниз
    m.right() - вправо
    m.dir(x, y) - задать направление к точке (x, y)
    m.shot(x, y) - выстрелить в направлении к точке (x, y)

За один вызов вашей функции вы делаете только один ход, поэтому не имеет смысла звать несолько функций движения. Также, если идет перезарядка орудия выстрел не произойдет.

Если вам нужно хранить информацию между ходами, храните ее в глобальной переменной, например так:

.. code-block:: python
    
    n = 0

    def move(me, enemies, bullets, bonuses, m):
        global n

        n += 1

        if (n // 100) % 2:
            m.left()
        else:
            m.right()

        m.shot(400, 300)

- Получили бота, который в течении первых ста ходов пытается ехать вправо (выехать за границы поля невозможно), в течении следующих ста ходов - влево, потом опять вправо и так далее.

Упражнение 1
++++++++++++

Напишите бота, который ездит вверх-вниз, от одного края поля до друго-го и обратно. Загрузите его на сайт ai-contest.vdi.mipt.ru, и создайте бой для этого бота против себя самого.

Упражнение 2
++++++++++++

Пусть этот бот теперь еще стреляет в сторону своего противника. Запустите бой против первой версии бота.

Упражнение 3
++++++++++++

Пусть он теперь ездит по периметру поля (и стреляеет в сторону противника).

Упражнение 4
++++++++++++

Очевидно, стрелять в сторону противника не эффективно - он обычно успевает уехать, пока снаряд долетит. Подумайте о том, как можно усовершенствовать стратегию. Напишиты бота, который побеждает все три предыдущих версии.

Упражнение 5 + домашнее задание
+++++++++++++++++++++++++++++++

Напишите бота, способного побеждать других участников и одержите победу в соревновании. Автоматические бои проходят постоянно, на основе их результатов складывается рейтинг участников (бои, которые создаете Вы сами в рейтинге не учивтываются). Через три недели сайт будет остановлен, и последние отправленные версии лучших участников сразятся в турнире каждый-с-каждым. Призы - конечно же плюсы на зачете.

